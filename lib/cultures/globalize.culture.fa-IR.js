/*
 * Globalize Culture fa-IR
 *
 * http://github.com/jquery/globalize
 *
 * Copyright Software Freedom Conservancy, Inc.
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * This file was generated by the Globalize Culture Generator
 * Translation: bugs found in this file need to be fixed in the generator
 */

(function (window, undefined) {

    var Globalize;

    if (typeof require !== "undefined" &&
        typeof exports !== "undefined" &&
        typeof module !== "undefined") {
        // Assume CommonJS
        Globalize = require("globalize");
    } else {
        // Global variable
        Globalize = window.Globalize;
    }

    Globalize.addCultureInfo("fa-IR", "default", {
        name: "fa-IR",
        englishName: "Persian",
        nativeName: "فارسى (ایران)",
        language: "fa",
        isRTL: true,
        numberFormat: {
            pattern: ["n-"],
            currency: {
                pattern: ["$n-", "$ n"],
                ".": "/",
                symbol: "ريال"
            }
        },
        calendars: {
            standard: {
                name: "Persian",
                firstDay: 6,
                days: {
                    names: ["يكشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                    namesAbbr: ["يكشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                    namesShort: ["ی", "د", "س", "چ", "پ", "ج", "ش"]
                },
                months: {
                    names: ["فروردین", "اردیبهشت", "خرداد", "تیر", "مرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند", ""],
                    namesAbbr: ["فروردین", "اردیبهشت", "خرداد", "تیر", "مرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند", ""]
                },
                AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                eras: [{ "name": "بعد از هجرت", "start": null, "offset": 0 }],
                twoDigitYearMax: 99,
                patterns: {
                    d: "yy/MM/dd",
                    D: "yyyy/MM/dd",
                    t: "hh:mm tt",
                    T: "hh:mm:ss tt",
                    f: "yyyy/MM/dd hh:mm tt",
                    F: "yyyy/MM/dd hh:mm:ss tt",
                    M: "MMMM dd"
                },
                convert: {
                    g_days_in_month: new Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31),
                    j_days_in_month: new Array(31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29),
                    jalali_to_gregorian: function (j /* array containing year, month, day*/) {
                        var gy, gm, gd;
                        var jy, jm, jd;
                        var g_day_no, j_day_no;
                        var leap;

                        var i;

                        jy = j[0] - 979;
                        jm = j[1] - 1;
                        jd = j[2] - 1;

                        j_day_no = 365 * jy + this.div(jy, 33) * 8 + this.div((jy % 33 + 3), 4);
                        for (i = 0; i < jm; ++i)
                            j_day_no += this.j_days_in_month[i];

                        j_day_no += jd;

                        g_day_no = j_day_no + 79;

                        gy = 1600 + 400 * this.div(g_day_no, 146097); /* 146097 = 365*400 + 400/4 - 400/100 + 400/400 */
                        g_day_no = g_day_no % 146097;

                        leap = 1;
                        if (g_day_no >= 36525) /* 36525 = 365*100 + 100/4 */ {
                            g_day_no--;
                            gy += 100 * this.div(g_day_no, 36524); /* 36524 = 365*100 + 100/4 - 100/100 */
                            g_day_no = g_day_no % 36524;

                            if (g_day_no >= 365)
                                g_day_no++;
                            else
                                leap = 0;
                        }

                        gy += 4 * this.div(g_day_no, 1461); /* 1461 = 365*4 + 4/4 */
                        g_day_no %= 1461;

                        if (g_day_no >= 366) {
                            leap = 0;

                            g_day_no--;
                            gy += this.div(g_day_no, 365);
                            g_day_no = g_day_no % 365;
                        }

                        for (i = 0; g_day_no >= this.g_days_in_month[i] + (i == 1 && leap) ; i++)
                            g_day_no -= this.g_days_in_month[i] + (i == 1 && leap);
                        gm = i + 1;
                        gd = g_day_no + 1;

                        return new Array(gy, gm, gd);
                    },
                    div: function (a, b) {
                        return Math.floor(a / b);
                    },
                    gregorian_to_jalali: function (g /* array containing year, month, day*/) {
                        var gy, gm, gd;
                        var jy, jm, jd;
                        var g_day_no, j_day_no;
                        var j_np;

                        var i;

                        gy = g[0] - 1600;
                        gm = g[1] - 1;
                        gd = g[2] - 1;

                        g_day_no = 365 * gy + this.div((gy + 3), 4) - this.div((gy + 99), 100) + this.div((gy + 399), 400);
                        for (i = 0; i < gm; ++i)
                            g_day_no += this.g_days_in_month[i];
                        if (gm > 1 && ((gy % 4 == 0 && gy % 100 != 0) || (gy % 400 == 0)))
                            /* leap and after Feb */
                            ++g_day_no;
                        g_day_no += gd;

                        j_day_no = g_day_no - 79;

                        j_np = this.div(j_day_no, 12053);
                        j_day_no %= 12053;

                        jy = 979 + 33 * j_np + 4 * this.div(j_day_no, 1461);
                        j_day_no %= 1461;

                        if (j_day_no >= 366) {
                            jy += this.div((j_day_no - 1), 365);
                            j_day_no = (j_day_no - 1) % 365;
                        }

                        for (i = 0; i < 11 && j_day_no >= this.j_days_in_month[i]; ++i) {
                            j_day_no -= this.j_days_in_month[i];
                        }
                        jm = i + 1;
                        jd = j_day_no + 1;

                        return new Array(jy, jm, jd);
                    },
                    toGregorian: function (hyear, hmonth, hday) {
                        var gDate = this.jalali_to_gregorian([hyear, hmonth + 1, hday]);
                        return new Date(gDate[0], gDate[1] - 1, gDate[2], 0, 0, 0, 0);
                    },
                    fromGregorian: function (gdate) {
                        var res = this.gregorian_to_jalali([gdate.getFullYear(), gdate.getMonth() + 1, gdate.getDate()]);
                        return [res[0], res[1] - 1, res[2]];
                    },
                    isLeapYear: function (year) {
                        year = Math.abs(fix(year));
                        return ((year * 8 + 29) % 33) < 8;
                    }
                }
            },
            Gregorian_TransliteratedFrench: {
                name: "Gregorian_TransliteratedFrench",
                firstDay: 6,
                days: {
                    names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                    namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                    namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                },
                months: {
                    names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                    namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                },
                AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                eras: [{ "name": "م", "start": null, "offset": 0 }],
                patterns: {
                    d: "MM/dd/yyyy",
                    t: "hh:mm tt",
                    T: "hh:mm:ss tt",
                    f: "dddd, MMMM dd, yyyy hh:mm tt",
                    F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                }
            },
            Gregorian_Localized: {
                firstDay: 6,
                days: {
                    names: ["يكشنبه", "دوشنبه", "سه شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                    namesAbbr: ["يكشنبه", "دوشنبه", "سه شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                    namesShort: ["ی", "د", "س", "چ", "پ", "ج", "ش"]
                },
                months: {
                    names: ["ژانويه", "فوريه", "مارس", "آوريل", "مى", "ژوئن", "ژوئيه", "اوت", "سپتامبر", "اُكتبر", "نوامبر", "دسامبر", ""],
                    namesAbbr: ["ژانويه", "فوريه", "مارس", "آوريل", "مى", "ژوئن", "ژوئيه", "اوت", "سپتامبر", "اُكتبر", "نوامبر", "دسامبر", ""]
                },
                AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                patterns: {
                    d: "yyyy/MM/dd",
                    D: "yyyy/MM/dd",
                    t: "hh:mm tt",
                    T: "hh:mm:ss tt",
                    f: "yyyy/MM/dd hh:mm tt",
                    F: "yyyy/MM/dd hh:mm:ss tt",
                    M: "dd MMMM"
                }
            },
            Hijri: {
                name: "Hijri",
                firstDay: 6,
                days: {
                    names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                    namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                    namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                },
                months: {
                    names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                    namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                },
                AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                twoDigitYearMax: 1451,
                patterns: {
                    d: "dd/MM/yy",
                    D: "dd/MM/yyyy",
                    t: "hh:mm tt",
                    T: "hh:mm:ss tt",
                    f: "dd/MM/yyyy hh:mm tt",
                    F: "dd/MM/yyyy hh:mm:ss tt",
                    M: "dd MMMM"
                },
                convert: {
                    // Adapted to Script from System.Globalization.HijriCalendar
                    ticks1970: 62135596800000,
                    // number of days leading up to each month
                    monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                    minDate: -42521673600000,
                    maxDate: 253402300799999,
                    // The number of days to add or subtract from the calendar to accommodate the variances
                    // in the start and the end of Ramadan and to accommodate the date difference between
                    // countries/regions. May be dynamically adjusted based on user preference, but should
                    // remain in the range of -2 to 2, inclusive.
                    hijriAdjustment: 0,
                    toGregorian: function (hyear, hmonth, hday) {
                        var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                        // 86400000 = ticks per day
                        var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                        // adjust for timezone, because we are interested in the gregorian date for the same timezone
                        // but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                        // date in the current timezone.
                        gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                        return gdate;
                    },
                    fromGregorian: function (gdate) {
                        if ((gdate < this.minDate) || (gdate > this.maxDate)) return null;
                        var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000,
                            daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                        // very particular formula determined by someone smart, adapted from the server-side implementation.
                        // it approximates the hijri year.
                        var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1,
                            absDays = this.daysToYear(hyear),
                            daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                        // hyear is just approximate, it may need adjustment up or down by 1.
                        if (daysSinceJan0101 < absDays) {
                            hyear--;
                            absDays -= daysInYear;
                        }
                        else if (daysSinceJan0101 === absDays) {
                            hyear--;
                            absDays = this.daysToYear(hyear);
                        }
                        else {
                            if (daysSinceJan0101 > (absDays + daysInYear)) {
                                absDays += daysInYear;
                                hyear++;
                            }
                        }
                        // determine month by looking at how many days into the hyear we are
                        // monthDays contains the number of days up to each month.
                        hmonth = 0;
                        var daysIntoYear = daysSinceJan0101 - absDays;
                        while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                            hmonth++;
                        }
                        hmonth--;
                        hday = daysIntoYear - this.monthDays[hmonth];
                        return [hyear, hmonth, hday];
                    },
                    daysToYear: function (year) {
                        // calculates how many days since Jan 1, 0001
                        var yearsToYear30 = Math.floor((year - 1) / 30) * 30,
                            yearsInto30 = year - yearsToYear30 - 1,
                            days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                        while (yearsInto30 > 0) {
                            days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                            yearsInto30--;
                        }
                        return days;
                    },
                    isLeapYear: function (year) {
                        return ((((year * 11) + 14) % 30) < 11);
                    }
                }
            },
            Gregorian_TransliteratedEnglish: {
                name: "Gregorian_TransliteratedEnglish",
                firstDay: 6,
                days: {
                    names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                    namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                    namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                },
                months: {
                    names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                    namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                },
                AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                eras: [{ "name": "م", "start": null, "offset": 0 }],
                patterns: {
                    d: "MM/dd/yyyy",
                    t: "hh:mm tt",
                    T: "hh:mm:ss tt",
                    f: "dddd, MMMM dd, yyyy hh:mm tt",
                    F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                }
            }
        }
    });

}(this));
